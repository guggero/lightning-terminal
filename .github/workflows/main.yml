name: CI

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "*"

env:
  # go needs absolute directories, using the $HOME variable doesn't work here.
  DOWNLOAD_CACHE: /home/runner/work/download_cache

jobs:
  frontend:
    name: frontend tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node_version: [12.x]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: set git config
        run: |
          git config --global core.eol lf
          git config --global core.autocrlf false

      - name: git checkout
        uses: actions/checkout@v2

      - name: setup nodejs v${{ matrix.node_version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node_version }}

      - name: get yarn cache dir
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ matrix.node_version }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ matrix.node_version }}-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-yarn-${{ matrix.node_version }}-
            ${{ runner.os }}-yarn-

      - name: install dependencies
        working-directory: ./app
        run: yarn

      - name: lint code
        working-directory: ./app
        run: yarn lint

      - name: typescript compile
        working-directory: ./app
        run: yarn tsc

      - name: unit tests
        working-directory: ./app
        run: yarn test:ci

  backend:
    name: backend build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        go_version: [1.14.x]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.eol lf
          git config --global core.autocrlf false

      - name: git checkout
        uses: actions/checkout@v2

      - name: go cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go_version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go_version }}-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-${{ matrix.go_version }}-
            ${{ runner.os }}-go-

      - name: get yarn cache dir
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-12.x-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-12.x-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-yarn-12.x-
            ${{ runner.os }}-yarn-

      - name: setup go v${{ matrix.go_version }}
        uses: actions/setup-go@v2
        with:
          go-version: '~${{ matrix.go_version }}'

      - name: build backend binary
        run: make build

  proto-compile-check:
    name: RPC proto compilation check
    runs-on: ubuntu-latest
    steps:
      - name: set git config
        run: |
          git config --global core.eol lf
          git config --global core.autocrlf false

      - name: git checkout
        uses: actions/checkout@v2

      - name: setup nodejs v${{ matrix.node_version }}
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: download cache
        uses: actions/cache@v1
        with:
          path: /home/runner/work/download_cache
          key: lnd-${{ runner.os }}-download-${{ hashFiles('**/install_protoc.sh') }}
          restore-keys: |
            lnd-${{ runner.os }}-download-${{ hashFiles('**/install_protoc.sh') }}
            lnd-${{ runner.os }}-download-

      - name: install protoc and protobuf libraries
        run: ./scripts/install_protoc.sh

      - name: get yarn cache dir
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ matrix.node_version }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ matrix.node_version }}-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-yarn-${{ matrix.node_version }}-
            ${{ runner.os }}-yarn-

      - name: install dependencies
        working-directory: ./app
        run: yarn

      - name: run check
        run: make protos-check
